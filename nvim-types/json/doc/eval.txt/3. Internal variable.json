{
 "leftTitle": "3. Internal variable",
 "rightTitle": "internal-variables* *E461",
 "description": "",
 "data": [
  {
   "type": "value",
   "name": "buffer-variable* *b:var* *b:",
   "description": "A variable name that is preceded with \"b:\" is local to the current buffer.\nThus you can have several \"b:foo\" variables, one for each buffer.\nThis kind of variable is deleted when the buffer is wiped out or deleted with\n|:bdelete|.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "b:changedtick* *changetick",
   "description": "b:changedtick\tThe total number of changes to the current buffer.  It is\n\t\tincremented for each change.  An undo command is also a change\n\t\tin this case.  Resetting 'modified' when writing the buffer is\n\t\talso counted.\n\t\tThis can be used to perform an action only when the buffer has\n\t\tchanged.  Example: >\n\t\t    :if my_changedtick != b:changedtick\n\t\t    :\tlet my_changedtick = b:changedtick\n\t\t    :\tcall My_Update()\n\t\t    :endif\n<\t\tYou cannot change or delete the b:changedtick variable.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "window-variable* *w:var* *w:",
   "description": "A variable name that is preceded with \"w:\" is local to the current window.  It\nis deleted when the window is closed.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "tabpage-variable* *t:var* *t:",
   "description": "A variable name that is preceded with \"t:\" is local to the current tab page,\nIt is deleted when the tab page is closed.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "global-variable* *g:var* *g:",
   "description": "Inside functions global variables are accessed with \"g:\".  Omitting this will\naccess a variable local to a function.  But \"g:\" can also be used in any other\nplace if you like.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "local-variable* *l:var* *l:",
   "description": "Inside functions local variables are accessed without prepending anything.\nBut you can also prepend \"l:\" if you like.  However, without prepending \"l:\"\nyou may run into reserved variable names.  For example \"count\".  By itself it\nrefers to \"v:count\".  Using \"l:count\" you can have a local variable with the\nsame name.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "script-variable* *s:var",
   "description": "In a Vim script variables starting with \"s:\" can be used.  They cannot be\naccessed from outside of the scripts, thus are local to the script.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "vim-variable* *v:var* *v:",
   "description": "",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "E963",
   "description": "Some variables can be set by the user, but the type cannot be changed.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:argv* *argv-variable",
   "description": "v:argv\t\tThe command line arguments Vim was invoked with.  This is a\n\t\tlist of strings.  The first item is the Vim command.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:beval_col* *beval_col-variable",
   "description": "v:beval_col\tThe number of the column, over which the mouse pointer is.\n\t\tThis is the byte index in the |v:beval_lnum| line.\n\t\tOnly valid while evaluating the 'balloonexpr' option.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:beval_bufnr* *beval_bufnr-variable",
   "description": "v:beval_bufnr\tThe number of the buffer, over which the mouse pointer is. Only\n\t\tvalid while evaluating the 'balloonexpr' option.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:beval_lnum* *beval_lnum-variable",
   "description": "v:beval_lnum\tThe number of the line, over which the mouse pointer is. Only\n\t\tvalid while evaluating the 'balloonexpr' option.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:beval_text* *beval_text-variable",
   "description": "v:beval_text\tThe text under or after the mouse pointer.  Usually a word as\n\t\tit is useful for debugging a C program.  'iskeyword' applies,\n\t\tbut a dot and \"->\" before the position is included.  When on a\n\t\t']' the text before it is used, including the matching '[' and\n\t\tword before it.  When on a Visual area within one line the\n\t\thighlighted text is used.  Also see |<cexpr>|.\n\t\tOnly valid while evaluating the 'balloonexpr' option.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:beval_winnr* *beval_winnr-variable",
   "description": "v:beval_winnr\tThe number of the window, over which the mouse pointer is. Only\n\t\tvalid while evaluating the 'balloonexpr' option.  The first\n\t\twindow has number zero (unlike most other places where a\n\t\twindow gets a number).",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:beval_winid* *beval_winid-variable",
   "description": "v:beval_winid\tThe |window-ID| of the window, over which the mouse pointer\n\t\tis.  Otherwise like v:beval_winnr.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:char* *char-variable",
   "description": "v:char\t\tArgument for evaluating 'formatexpr' and used for the typed\n\t\tcharacter when using <expr> in an abbreviation |:map-<expr>|.\n\t\tIt is also used by the |InsertCharPre| and |InsertEnter| events.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:charconvert_from* *charconvert_from-variable",
   "description": "v:charconvert_from\n\t\tThe name of the character encoding of a file to be converted.\n\t\tOnly valid while evaluating the 'charconvert' option.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:charconvert_to* *charconvert_to-variable",
   "description": "v:charconvert_to\n\t\tThe name of the character encoding of a file after conversion.\n\t\tOnly valid while evaluating the 'charconvert' option.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:cmdarg* *cmdarg-variable",
   "description": "v:cmdarg\tThis variable is used for two purposes:\n\t\t1. The extra arguments given to a file read/write command.\n\t\t   Currently these are \"++enc=\" and \"++ff=\".  This variable is\n\t\t   set before an autocommand event for a file read/write\n\t\t   command is triggered.  There is a leading space to make it\n\t\t   possible to append this variable directly after the\n\t\t   read/write command.  Note: The \"+cmd\" argument isn't\n\t\t   included here, because it will be executed anyway.\n\t\t2. When printing a PostScript file with \":hardcopy\" this is\n\t\t   the argument for the \":hardcopy\" command.  This can be used\n\t\t   in 'printexpr'.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:cmdbang* *cmdbang-variable",
   "description": "v:cmdbang\tSet like v:cmdarg for a file read/write command.  When a \"!\"\n\t\twas used the value is 1, otherwise it is 0.  Note that this\n\t\tcan only be used in autocommands.  For user commands |<bang>|\n\t\tcan be used.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:completed_item* *completed_item-variable",
   "description": "v:completed_item\n\t\tDictionary containing the most recent |complete-items| after\n\t\t|CompleteDone|.  Empty if the completion failed, or after\n\t\tleaving and re-entering insert mode.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:count* *count-variable",
   "description": "v:count\t\tThe count given for the last Normal mode command.  Can be used\n\t\tto get the count before a mapping.  Read-only.  Example: >\n\t:map _x :<C-U>echo \"the count is \" . v:count<CR>\n<\t\tNote: The <C-U> is required to remove the line range that you\n\t\tget when typing ':' after a count.\n\t\tWhen there are two counts, as in \"3d2w\", they are multiplied,\n\t\tjust like what happens in the command, \"d6w\" for the example.\n\t\tAlso used for evaluating the 'formatexpr' option.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:count1* *count1-variable",
   "description": "v:count1\tJust like \"v:count\", but defaults to one when no count is\n\t\tused.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:ctype* *ctype-variable",
   "description": "v:ctype\t\tThe current locale setting for characters of the runtime\n\t\tenvironment.  This allows Vim scripts to be aware of the\n\t\tcurrent locale encoding.  Technical: it's the value of\n\t\tLC_CTYPE.  When not using a locale the value is \"C\".\n\t\tThis variable can not be set directly, use the |:language|\n\t\tcommand.\n\t\tSee |multi-lang|.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:dying* *dying-variable",
   "description": "v:dying\t\tNormally zero.  When a deadly signal is caught it's set to\n\t\tone.  When multiple signals are caught the number increases.\n\t\tCan be used in an autocommand to check if Vim didn't\n\t\tterminate normally. {only works on Unix}\n\t\tExample: >\n\t:au VimLeave * if v:dying | echo \"\\nAAAAaaaarrrggghhhh!!!\\n\" | endif\n<\t\tNote: if another deadly signal is caught when v:dying is one,\n\t\tVimLeave autocommands will not be executed.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:exiting* *exiting-variable",
   "description": "v:exiting\tExit code, or |v:null| before invoking the |VimLeavePre|\n\t\tand |VimLeave| autocmds.  See |:q|, |:x| and |:cquit|.\n\t\tExample: >\n\t\t\t:au VimLeave * echo \"Exit value is \" .. v:exiting",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:echospace* *echospace-variable",
   "description": "v:echospace\tNumber of screen cells that can be used for an `:echo` message\n\t\tin the last screen line before causing the |hit-enter-prompt|.\n\t\tDepends on 'showcmd', 'ruler' and 'columns'.  You need to\n\t\tcheck 'cmdheight' for whether there are full-width lines\n\t\tavailable above the last line.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:errmsg* *errmsg-variable",
   "description": "v:errmsg\tLast given error message.\n\t\tModifiable (can be set).\n\t\tExample: >\n\t:let v:errmsg = \"\"\n\t:silent! next\n\t:if v:errmsg != \"\"\n\t:  ... handle error\n<",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:errors* *errors-variable* *assert-return",
   "description": "v:errors\tErrors found by assert functions, such as |assert_true()|.\n\t\tThis is a list of strings.\n\t\tThe assert functions append an item when an assert fails.\n\t\tThe return value indicates this: a one is returned if an item\n\t\twas added to v:errors, otherwise zero is returned.\n\t\tTo remove old results make it empty: >\n\t:let v:errors = []\n<\t\tIf v:errors is set to anything but a list it is made an empty\n\t\tlist by the assert function.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:event* *event-variable",
   "description": "v:event\t\tDictionary of event data for the current |autocommand|.  Valid\n\t\tonly during the event lifetime; storing or passing v:event is\n\t\tinvalid!  Copy it instead: >\n\t\t\tau TextYankPost * let g:foo = deepcopy(v:event)\n<\t\tKeys vary by event; see the documentation for the specific\n\t\tevent, e.g. |DirChanged| or |TextYankPost|.\n\t\t\tKEY\t\tDESCRIPTION ~\n\t\t\tabort\t\tWhether the event triggered during\n\t\t\t\t\tan aborting condition (e.g. |c_Esc| or\n\t\t\t\t\t|c_CTRL-C| for |CmdlineLeave|).\n\t\t\tchan\t\t|channel-id| or 0 for \"internal\".\n\t\t\tcmdlevel\tLevel of cmdline.\n\t\t\tcmdtype\t\tType of cmdline, |cmdline-char|.\n\t\t\tcwd\t\tCurrent working directory.\n\t\t\tinclusive\tMotion is |inclusive|, else exclusive.\n\t\t\tscope\t\tEvent-specific scope name.\n\t\t\toperator\tCurrent |operator|.  Also set for Ex\n\t\t\t\t\tcommands (unlike |v:operator|). For\n\t\t\t\t\texample if |TextYankPost| is triggered\n\t\t\t\t\tby the |:yank| Ex command then\n\t\t\t\t\t`v:event.operator` is \"y\".\n\t\t\tregcontents\tText stored in the register as a\n\t\t\t\t\t|readfile()|-style list of lines.\n\t\t\tregname\t\tRequested register (e.g \"x\" for \"xyy)\n\t\t\t\t\tor the empty string for an unnamed\n\t\t\t\t\toperation.\n\t\t\tregtype\t\tType of register as returned by\n\t\t\t\t\t|getregtype()|.\n\t\t\tvisual\t\tSelection is visual (as opposed to,\n\t\t\t\t\te.g., via motion).\n\t\t\tcompleted_item    Current selected complete item on\n\t\t\t\t\t|CompleteChanged|, Is `{}` when no complete\n\t\t\t\t\titem selected.\n\t\t\theight \t\tHeight of popup menu on |CompleteChanged|\n\t\t\twidth   \twidth of popup menu on |CompleteChanged|\n\t\t\trow  \t \tRow count of popup menu on |CompleteChanged|,\n\t\t\t\t\trelative to screen.\n\t\t\tcol  \t \tCol count of popup menu on |CompleteChanged|,\n\t\t\t\t\trelative to screen.\n\t\t\tsize \t\tTotal number of completion items on\n\t\t\t\t\t|CompleteChanged|.\n\t\t\tscrollbar \tIs |v:true| if popup menu have scrollbar, or\n\t\t\t\t\t|v:false| if not.\n\t\t\tchanged_window \tIs |v:true| if the the event fired\n\t\t\t\t\twhile changing window (or tab) on |DirChanged|.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:exception* *exception-variable",
   "description": "v:exception\tThe value of the exception most recently caught and not\n\t\tfinished.  See also |v:throwpoint| and |throw-variables|.\n\t\tExample: >\n\t:try\n\t:  throw \"oops\"\n\t:catch /.*/\n\t:  echo \"caught \" .. v:exception\n\t:endtry\n<\t\tOutput: \"caught oops\".",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:false* *false-variable",
   "description": "v:false\t\tSpecial value used to put \"false\" in JSON and msgpack.  See\n\t\t|json_encode()|.  This value is converted to \"v:false\" when used\n\t\tas a String (e.g. in |expr5| with string concatenation\n\t\toperator) and to zero when used as a Number (e.g. in |expr5|\n\t\tor |expr7| when used with numeric operators). Read-only.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:fcs_reason* *fcs_reason-variable",
   "description": "v:fcs_reason\tThe reason why the |FileChangedShell| event was triggered.\n\t\tCan be used in an autocommand to decide what to do and/or what\n\t\tto set v:fcs_choice to.  Possible values:\n\t\t\tdeleted\t\tfile no longer exists\n\t\t\tconflict\tfile contents, mode or timestamp was\n\t\t\t\t\tchanged and buffer is modified\n\t\t\tchanged\t\tfile contents has changed\n\t\t\tmode\t\tmode of file changed\n\t\t\ttime\t\tonly file timestamp changed",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:fcs_choice* *fcs_choice-variable",
   "description": "v:fcs_choice\tWhat should happen after a |FileChangedShell| event was\n\t\ttriggered.  Can be used in an autocommand to tell Vim what to\n\t\tdo with the affected buffer:\n\t\t\treload\t\tReload the buffer (does not work if\n\t\t\t\t\tthe file was deleted).\n\t\t\task\t\tAsk the user what to do, as if there\n\t\t\t\t\twas no autocommand.  Except that when\n\t\t\t\t\tonly the timestamp changed nothing\n\t\t\t\t\twill happen.\n\t\t\t<empty>\t\tNothing, the autocommand should do\n\t\t\t\t\teverything that needs to be done.\n\t\tThe default is empty.  If another (invalid) value is used then\n\t\tVim behaves like it is empty, there is no warning message.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:fname_in* *fname_in-variable",
   "description": "v:fname_in\tThe name of the input file.  Valid while evaluating:\n\t\t\toption\t\tused for ~\n\t\t\t'charconvert'\tfile to be converted\n\t\t\t'diffexpr'\toriginal file\n\t\t\t'patchexpr'\toriginal file\n\t\t\t'printexpr'\tfile to be printed\n\t\tAnd set to the swap file name for |SwapExists|.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:fname_out* *fname_out-variable",
   "description": "v:fname_out\tThe name of the output file.  Only valid while\n\t\tevaluating:\n\t\t\toption\t\tused for ~\n\t\t\t'charconvert'\tresulting converted file (*)\n\t\t\t'diffexpr'\toutput of diff\n\t\t\t'patchexpr'\tresulting patched file\n\t\t(*) When doing conversion for a write command (e.g., \":w\n\t\tfile\") it will be equal to v:fname_in.  When doing conversion\n\t\tfor a read command (e.g., \":e file\") it will be a temporary\n\t\tfile and different from v:fname_in.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:fname_new* *fname_new-variable",
   "description": "v:fname_new\tThe name of the new version of the file.  Only valid while\n\t\tevaluating 'diffexpr'.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:fname_diff* *fname_diff-variable",
   "description": "v:fname_diff\tThe name of the diff (patch) file.  Only valid while\n\t\tevaluating 'patchexpr'.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:folddashes* *folddashes-variable",
   "description": "v:folddashes\tUsed for 'foldtext': dashes representing foldlevel of a closed\n\t\tfold.\n\t\tRead-only in the |sandbox|. |fold-foldtext|",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:foldlevel* *foldlevel-variable",
   "description": "v:foldlevel\tUsed for 'foldtext': foldlevel of closed fold.\n\t\tRead-only in the |sandbox|. |fold-foldtext|",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:foldend* *foldend-variable",
   "description": "v:foldend\tUsed for 'foldtext': last line of closed fold.\n\t\tRead-only in the |sandbox|. |fold-foldtext|",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:foldstart* *foldstart-variable",
   "description": "v:foldstart\tUsed for 'foldtext': first line of closed fold.\n\t\tRead-only in the |sandbox|. |fold-foldtext|",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:hlsearch* *hlsearch-variable",
   "description": "v:hlsearch\tVariable that indicates whether search highlighting is on.\n\t\tSetting it makes sense only if 'hlsearch' is enabled. Setting\n\t\tthis variable to zero acts like the |:nohlsearch| command,\n\t\tsetting it to one acts like >\n\t\t\tlet &hlsearch = &hlsearch\n<\t\tNote that the value is restored when returning from a\n\t\tfunction. |function-search-undo|.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:insertmode* *insertmode-variable",
   "description": "v:insertmode\tUsed for the |InsertEnter| and |InsertChange| autocommand\n\t\tevents.  Values:\n\t\t\ti\tInsert mode\n\t\t\tr\tReplace mode\n\t\t\tv\tVirtual Replace mode",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:key* *key-variable",
   "description": "v:key\t\tKey of the current item of a |Dictionary|.  Only valid while\n\t\tevaluating the expression used with |map()| and |filter()|.\n\t\tRead-only.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:lang* *lang-variable",
   "description": "v:lang\t\tThe current locale setting for messages of the runtime\n\t\tenvironment.  This allows Vim scripts to be aware of the\n\t\tcurrent language.  Technical: it's the value of LC_MESSAGES.\n\t\tThe value is system dependent.\n\t\tThis variable can not be set directly, use the |:language|\n\t\tcommand.\n\t\tIt can be different from |v:ctype| when messages are desired\n\t\tin a different language than what is used for character\n\t\tencoding.  See |multi-lang|.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:lc_time* *lc_time-variable",
   "description": "v:lc_time\tThe current locale setting for time messages of the runtime\n\t\tenvironment.  This allows Vim scripts to be aware of the\n\t\tcurrent language.  Technical: it's the value of LC_TIME.\n\t\tThis variable can not be set directly, use the |:language|\n\t\tcommand.  See |multi-lang|.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:lnum* *lnum-variable",
   "description": "v:lnum\t\tLine number for the 'foldexpr' |fold-expr|, 'formatexpr' and\n\t\t'indentexpr' expressions, tab page number for 'guitablabel'\n\t\tand 'guitabtooltip'.  Only valid while one of these\n\t\texpressions is being evaluated.  Read-only when in the\n\t\t|sandbox|.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:lua* *lua-variable",
   "description": "v:lua\t\tPrefix for calling Lua functions from expressions.\n\t\tSee |v:lua-call| for more information.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:mouse_win* *mouse_win-variable",
   "description": "v:mouse_win\tWindow number for a mouse click obtained with |getchar()|.\n\t\tFirst window has number 1, like with |winnr()|.  The value is\n\t\tzero when there was no mouse button click.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:mouse_winid* *mouse_winid-variable",
   "description": "v:mouse_winid\t|window-ID| for a mouse click obtained with |getchar()|.\n\t\tThe value is zero when there was no mouse button click.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:mouse_lnum* *mouse_lnum-variable",
   "description": "v:mouse_lnum\tLine number for a mouse click obtained with |getchar()|.\n\t\tThis is the text line number, not the screen line number.  The\n\t\tvalue is zero when there was no mouse button click.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:mouse_col* *mouse_col-variable",
   "description": "v:mouse_col\tColumn number for a mouse click obtained with |getchar()|.\n\t\tThis is the screen column number, like with |virtcol()|.  The\n\t\tvalue is zero when there was no mouse button click.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:msgpack_types* *msgpack_types-variable",
   "description": "v:msgpack_types\tDictionary containing msgpack types used by |msgpackparse()|\n\t\tand |msgpackdump()|. All types inside dictionary are fixed\n\t\t(not editable) empty lists. To check whether some list is one\n\t\tof msgpack types, use |is| operator.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:null* *null-variable",
   "description": "v:null\t\tSpecial value used to put \"null\" in JSON and NIL in msgpack.\n\t\tSee |json_encode()|.  This value is converted to \"v:null\" when\n\t\tused as a String (e.g. in |expr5| with string concatenation\n\t\toperator) and to zero when used as a Number (e.g. in |expr5|\n\t\tor |expr7| when used with numeric operators). Read-only.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:oldfiles* *oldfiles-variable",
   "description": "v:oldfiles\tList of file names that is loaded from the |shada| file on\n\t\tstartup.  These are the files that Vim remembers marks for.\n\t\tThe length of the List is limited by the ' argument of the\n\t\t'shada' option (default is 100).\n\t\tWhen the |shada| file is not used the List is empty.\n\t\tAlso see |:oldfiles| and |c_#<|.\n\t\tThe List can be modified, but this has no effect on what is\n\t\tstored in the |shada| file later.  If you use values other\n\t\tthan String this will cause trouble.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:option_new",
   "description": "v:option_new    New value of the option. Valid while executing an |OptionSet|\n\t\tautocommand.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:option_old",
   "description": "v:option_old    Old value of the option. Valid while executing an |OptionSet|\n\t\tautocommand.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:option_type",
   "description": "v:option_type   Scope of the set command. Valid while executing an\n\t\t|OptionSet| autocommand. Can be either \"global\" or \"local\"",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:operator* *operator-variable",
   "description": "v:operator\tThe last operator given in Normal mode.  This is a single\n\t\tcharacter except for commands starting with <g> or <z>,\n\t\tin which case it is two characters.  Best used alongside\n\t\t|v:prevcount| and |v:register|.  Useful if you want to cancel\n\t\tOperator-pending mode and then use the operator, e.g.: >\n\t\t\t:omap O <Esc>:call MyMotion(v:operator)<CR>\n<\t\tThe value remains set until another operator is entered, thus\n\t\tdon't expect it to be empty.\n\t\tv:operator is not set for |:delete|, |:yank| or other Ex\n\t\tcommands.\n\t\tRead-only.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:prevcount* *prevcount-variable",
   "description": "v:prevcount\tThe count given for the last but one Normal mode command.\n\t\tThis is the v:count value of the previous command.  Useful if\n\t\tyou want to cancel Visual or Operator-pending mode and then\n\t\tuse the count, e.g.: >\n\t\t\t:vmap % <Esc>:call MyFilter(v:prevcount)<CR>\n<\t\tRead-only.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:profiling* *profiling-variable",
   "description": "v:profiling\tNormally zero.  Set to one after using \":profile start\".\n\t\tSee |profiling|.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:progname* *progname-variable",
   "description": "v:progname\tThe name by which Nvim was invoked (with path removed).\n\t\tRead-only.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:progpath* *progpath-variable",
   "description": "v:progpath\tAbsolute path to the current running Nvim.\n\t\tRead-only.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:register* *register-variable",
   "description": "v:register\tThe name of the register in effect for the current normal mode\n\t\tcommand (regardless of whether that command actually used a\n\t\tregister).  Or for the currently executing normal mode mapping\n\t\t(use this in custom commands that take a register).\n\t\tIf none is supplied it is the default register '\"', unless\n\t\t'clipboard' contains \"unnamed\" or \"unnamedplus\", then it is\n\t\t'*' or '+'.\n\t\tAlso see |getreg()| and |setreg()|",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:scrollstart* *scrollstart-variable",
   "description": "v:scrollstart\tString describing the script or function that caused the\n\t\tscreen to scroll up.  It's only set when it is empty, thus the\n\t\tfirst reason is remembered.  It is set to \"Unknown\" for a\n\t\ttyped command.\n\t\tThis can be used to find out why your script causes the\n\t\thit-enter prompt.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:servername* *servername-variable",
   "description": "v:servername\tPrimary listen-address of the current Nvim instance, the first\n\t\titem returned by |serverlist()|.  Can be set by |--listen| or\n\t\t|$NVIM_LISTEN_ADDRESS| at startup. |serverstart()| |serverstop()|\n\t\tRead-only.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:searchforward* *searchforward-variable",
   "description": "Search direction:  1 after a forward search, 0 after a\n\t\tbackward search.  It is reset to forward when directly setting\n\t\tthe last search pattern, see |quote/|.\n\t\tNote that the value is restored when returning from a\n\t\tfunction. |function-search-undo|.\n\t\tRead-write.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:shell_error* *shell_error-variable",
   "description": "v:shell_error\tResult of the last shell command.  When non-zero, the last\n\t\tshell command had an error.  When zero, there was no problem.\n\t\tThis only works when the shell returns the error code to Vim.\n\t\tThe value -1 is often used when the command could not be\n\t\texecuted.  Read-only.\n\t\tExample: >\n\t:!mv foo bar\n\t:if v:shell_error\n\t:  echo 'could not rename \"foo\" to \"bar\"!'\n\t:endif\n<",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:statusmsg* *statusmsg-variable",
   "description": "v:statusmsg\tLast given status message.\n\t\tModifiable (can be set).",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:stderr* *stderr-variable",
   "description": "v:stderr\t|channel-id| corresponding to stderr. The value is always 2;\n\t\tuse this variable to make your code more descriptive.\n\t\tUnlike stdin and stdout (see |stdioopen()|), stderr is always\n\t\topen for writing. Example: >\n\t\t\t:call chansend(v:stderr, \"error: toaster empty\\n\")\n<",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:swapname* *swapname-variable",
   "description": "v:swapname\tOnly valid when executing |SwapExists| autocommands: Name of\n\t\tthe swap file found.  Read-only.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:swapchoice* *swapchoice-variable",
   "description": "v:swapchoice\t|SwapExists| autocommands can set this to the selected choice\n\t\tfor handling an existing swap file:\n\t\t\t'o'\tOpen read-only\n\t\t\t'e'\tEdit anyway\n\t\t\t'r'\tRecover\n\t\t\t'd'\tDelete swapfile\n\t\t\t'q'\tQuit\n\t\t\t'a'\tAbort\n\t\tThe value should be a single-character string.  An empty value\n\t\tresults in the user being asked, as would happen when there is\n\t\tno SwapExists autocommand.  The default is empty.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:swapcommand* *swapcommand-variable",
   "description": "v:swapcommand\tNormal mode command to be executed after a file has been\n\t\topened.  Can be used for a |SwapExists| autocommand to have\n\t\tanother Vim open the file and jump to the right place.  For\n\t\texample, when jumping to a tag the value is \":tag tagname\\r\".\n\t\tFor \":edit +cmd file\" the value is \":cmd\\r\".",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:t_TYPE* *v:t_bool* *t_bool-variable",
   "description": "v:t_bool\tValue of Boolean type.  Read-only.  See: |type()|",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:t_dict* *t_dict-variable",
   "description": "v:t_dict\tValue of Dictionary type.  Read-only.  See: |type()|",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:t_float* *t_float-variable",
   "description": "v:t_float\tValue of Float type.  Read-only.  See: |type()|",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:t_func* *t_func-variable",
   "description": "v:t_func\tValue of Funcref type.  Read-only.  See: |type()|",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:t_list* *t_list-variable",
   "description": "v:t_list\tValue of List type.  Read-only.  See: |type()|",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:t_number* *t_number-variable",
   "description": "v:t_number\tValue of Number type.  Read-only.  See: |type()|",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:t_string* *t_string-variable",
   "description": "v:t_string\tValue of String type.  Read-only.  See: |type()|",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:termresponse* *termresponse-variable",
   "description": "v:termresponse\tThe escape sequence returned by the terminal for the DA\n\t\t(request primary device attributes) control sequence.  It is\n\t\tset when Vim receives an escape sequence that starts with ESC\n\t\t[ or CSI and ends in a 'c', with only digits, ';' and '.' in\n\t\tbetween.\n\t\tWhen this option is set, the TermResponse autocommand event is\n\t\tfired, so that you can react to the response from the\n\t\tterminal.\n\t\tThe response from a new xterm is: \"<Esc>[ Pp ; Pv ; Pc c\".  Pp\n\t\tis the terminal type: 0 for vt100 and 1 for vt220.  Pv is the\n\t\tpatch level (since this was introduced in patch 95, it's\n\t\talways 95 or bigger).  Pc is always zero.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:testing* *testing-variable",
   "description": "v:testing\tMust be set before using `test_garbagecollect_now()`.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:this_session* *this_session-variable",
   "description": "v:this_session\tFull filename of the last loaded or saved session file.\n\t\tEmpty when no session file has been saved.  See |:mksession|.\n\t\tModifiable (can be set).",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:throwpoint* *throwpoint-variable",
   "description": "v:throwpoint\tThe point where the exception most recently caught and not\n\t\tfinished was thrown.  Not set when commands are typed.  See\n\t\talso |v:exception| and |throw-variables|.\n\t\tExample: >\n\t:try\n\t:  throw \"oops\"\n\t:catch /.*/\n\t:  echo \"Exception from\" v:throwpoint\n\t:endtry\n<\t\tOutput: \"Exception from test.vim, line 2\"",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:true* *true-variable",
   "description": "v:true\t\tSpecial value used to put \"true\" in JSON and msgpack.  See\n\t\t|json_encode()|.  This value is converted to \"v:true\" when used\n\t\tas a String (e.g. in |expr5| with string concatenation\n\t\toperator) and to one when used as a Number (e.g. in |expr5| or\n\t\t|expr7| when used with numeric operators). Read-only.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:val* *val-variable",
   "description": "v:val\t\tValue of the current item of a |List| or |Dictionary|.  Only\n\t\tvalid while evaluating the expression used with |map()| and\n\t\t|filter()|.  Read-only.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:version* *version-variable",
   "description": "v:version\tVim version number: major version times 100 plus minor\n\t\tversion.  Vim 5.0 is 500, Vim 5.1 is 501.\n\t\tRead-only.\n\t\tUse |has()| to check the Nvim (not Vim) version: >\n\t\t\t:if has(\"nvim-0.2.1\")\n<",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:vim_did_enter* *vim_did_enter-variable",
   "description": "v:vim_did_enter\t0 during startup, 1 just before |VimEnter|.\n\t\tRead-only.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:warningmsg* *warningmsg-variable",
   "description": "v:warningmsg\tLast given warning message.\n\t\tModifiable (can be set).",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "v:windowid* *windowid-variable",
   "description": "v:windowid\tApplication-specific window \"handle\" which may be set by any\n\t\tattached UI. Defaults to zero.\n\t\tNote: For Nvim |windows| use |winnr()| or |win_getid()|, see\n\t\t|window-ID|.",
   "valuetype": "any"
  }
 ]
}